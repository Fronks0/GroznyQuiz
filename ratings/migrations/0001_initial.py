# Generated by Django 5.2.5 on 2025-08-27 15:19

import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название города')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100, verbose_name='Полное название')),
                ('short_name', models.CharField(max_length=20, verbose_name='Короткое название')),
            ],
            options={
                'verbose_name': 'Тема',
                'verbose_name_plural': 'Темы',
            },
        ),
        migrations.CreateModel(
            name='TournamentSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название серии')),
                ('display_order', models.PositiveIntegerField(default=100, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Серия турниров',
                'verbose_name_plural': 'Серии турниров',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название команды')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.city', verbose_name='Город команды')),
            ],
            options={
                'verbose_name': 'Команда',
                'verbose_name_plural': 'Команды',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название турнира')),
                ('date', models.DateField(verbose_name='Дата проведения')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.city', verbose_name='Город проведения')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.tournamentseries', verbose_name='Серия турнира')),
            ],
            options={
                'verbose_name': 'Турнир',
                'verbose_name_plural': 'Турниры',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='GameResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_place', models.PositiveIntegerField(default=0, verbose_name='Занятое место')),
                ('black_box_answer', models.CharField(blank=True, default='-', max_length=100, null=True, verbose_name='Ответ на черный ящик')),
                ('black_box_points', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=6, verbose_name='Очки за черный ящик')),
                ('total_points', models.FloatField(default=0.0, verbose_name='Всего очков')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.team', verbose_name='Команда')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.tournament', verbose_name='Турнир')),
            ],
            options={
                'verbose_name': 'Результат игры',
                'verbose_name_plural': 'Результаты игры',
            },
        ),
        migrations.CreateModel(
            name='TournamentTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.topic')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.tournament')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('tournament', 'topic')},
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='topics',
            field=models.ManyToManyField(through='ratings.TournamentTopic', to='ratings.topic', verbose_name='Темы турнира'),
        ),
        migrations.CreateModel(
            name='TopicResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.DecimalField(decimal_places=1, default=0, max_digits=4, verbose_name='Очки')),
                ('game_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.gameresult', verbose_name='Результат игры')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ratings.topic', verbose_name='Тема')),
            ],
            options={
                'verbose_name': 'Результат по теме',
                'verbose_name_plural': 'Результаты по темам',
                'unique_together': {('game_result', 'topic')},
            },
        ),
    ]
